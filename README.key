
HOWTO

1. GENERATE KEYS

The keytool is used to generate public and private key pairs.
The tool generate RSA keys only but size can be configurable.

The keytool comand is used like:

    keytool -name <keyname> -u <item>* \
    	    [-size <size>] [-serial <serial>] [-o <basename>] [-h] [-b]

Where 
      -name <keyname>	Sets the mandatory name of the key

      -u <item>*	Set the mandatory key usage, which is used
      	 		to separate content type etc. Accepted items are:
			key, content, os, any, m1, font, image, plugin,
			exec, driver or a hex code with the interal coding.
			Items must be separated with a comma and no extra
			space is accepted.

      -size <size>	Specify the RSA key length 1024 is the default
      	    		and MUST be 1024 for device keys (since they
			are pached as binary chunks)

      -o <basename>	Specify the output file name for the keypair where
      	 		extension should not be given. .pub and .key are
			appended to the public and private respectively.
			If -o is not given then the key name is used
			as the base name for the key files.

      -b		Generate a binary file with the content of
      			the public key and the .bin extension.

      -h		Generate a header file where the binary 
      			public key is stored as a static byte array.

To generate a device key one could use:

   keytool -name "M1" -u any -serial "12345678" -b -o ../keys/device_12345678

The device key generated will the be an RSA key with 1024 bits. The files
generated are
	  ../keys/device_12345678.pub
	  ../keys/device_12345678.key
	  ../keys/device_12345678.bin

Serial should match the serial number of the box. The private key MUST then
be stored securely in a database and kept for signing content and data
sent to the box owner. The speical key named "magden" must also be signed
by the device key before the "magden" PUBLIC key is put on the box.

The bin file should be used to patch the m1 executable with the builin
public key which is used to decode data and check signatures.


To generate a company key for distrututing graphics.

   keytool -name "Company A" -serial "1" -u image -o ../keys/company_A_1


2. SIGN KEYS AND DATA

To distribute data the signtool is used to both sign and encrypt content.
To run signtool a private key is used in order to encrypt and sign data,
either private or public key can be used to decrypt or verify data.

Signtool useage:

  signtool <mode> [options] <content-file>

  mode:
      sign       Sign the content data but do not encrypt it.

      encrypt    Encrypt and sign content data using a random password that is 
                 stored encypted with public key encryption.

      decrypt    Decrypt content data 
                 (accept key-file.pub or file-file.key)
  
      verify     Check the signature and possibly decryption
                (accept key-file.pub or file-file.key)
 
     -s <name>   Signer key (needed for encryption and signing)
     -d          Print some debug info.
     -o <file>   Output file name
     -K <path>   Add path to key storage.
     -c <num>	 Set compression level for encrypt operation,
     		 0 (default mean no compression), -1 default compression,
		 1 best speed, 9 best compression.

Keys needed are loaded with the -K option which can be repeated for
each path.